;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body(slice $to, int $value, int $bounce, cell $body) inline {
    return ($bounce, $to, $value, 0, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body(slice $to, int $value, cell $body) inline {
    return (true, $to, $value, 0, $body, null(), null());
}

;;
;; Type: PersonDetails
;; TLB: _ name:^string address:^string = PersonDetails
;;

builder $PersonDetails$_store(builder build_0, (slice, slice) v) inline {
    var (v'name, v'address) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'address).end_cell());
    return build_0;
}

(slice, ((slice, slice))) $PersonDetails$_load(slice sc_0) inline {
    var v'name = sc_0~load_ref().begin_parse();
    var v'address = sc_0~load_ref().begin_parse();
    return (sc_0, (v'name, v'address));
}

tuple $PersonDetails$_to_tuple(((slice, slice)) v) inline {
    var (v'name, v'address) = v;
    return __tact_tuple_create_2(v'name, v'address);
}

tuple $PersonDetails$_to_external(((slice, slice)) v) inline {
    var (v'name, v'address) = v; 
    return $PersonDetails$_to_tuple(v'name, v'address);
}

;;
;; Type: ExclusiveRightsClaim
;; TLB: _ author:address authorDetails:PersonDetails{name:^string,address:^string} amount:coins sentDocuments:bool viewedDocuments:bool = ExclusiveRightsClaim
;;

builder $ExclusiveRightsClaim$_store(builder build_0, (slice, (slice, slice), int, int, int) v) inline {
    var (v'author, (v'authorDetails'name, v'authorDetails'address), v'amount, v'sentDocuments, v'viewedDocuments) = v;
    build_0 = __tact_store_address(build_0, v'author);
    build_0 = $PersonDetails$_store(build_0, (v'authorDetails'name, v'authorDetails'address));
    build_0 = build_0.store_coins(v'amount);
    build_0 = build_0.store_int(v'sentDocuments, 1);
    build_0 = build_0.store_int(v'viewedDocuments, 1);
    return build_0;
}

(slice, ((slice, (slice, slice), int, int, int))) $ExclusiveRightsClaim$_load(slice sc_0) inline {
    var v'author = sc_0~__tact_load_address();
    var v'authorDetails = sc_0~$PersonDetails$_load();
    var v'amount = sc_0~load_coins();
    var v'sentDocuments = sc_0~load_int(1);
    var v'viewedDocuments = sc_0~load_int(1);
    return (sc_0, (v'author, v'authorDetails, v'amount, v'sentDocuments, v'viewedDocuments));
}

((slice, (slice, slice), int, int, int)) $ExclusiveRightsClaim$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'author, slice vvv'authorDetails'name, slice vvv'authorDetails'address, int vvv'amount, int vvv'sentDocuments, int vvv'viewedDocuments) = __tact_tuple_destroy_6(v);
    return (vvv'author, (vvv'authorDetails'name, vvv'authorDetails'address), vvv'amount, vvv'sentDocuments, vvv'viewedDocuments);
}

tuple $ExclusiveRightsClaim$_as_optional((slice, (slice, slice), int, int, int) v) inline {
    var (v'author, (v'authorDetails'name, v'authorDetails'address), v'amount, v'sentDocuments, v'viewedDocuments) = v;
    return __tact_tuple_create_6(v'author, v'authorDetails'name, v'authorDetails'address, v'amount, v'sentDocuments, v'viewedDocuments);
}

_ $ExclusiveRightsClaim$_get_author((slice, (slice, slice), int, int, int) v) inline {
    var (v'author, v'authorDetails, v'amount, v'sentDocuments, v'viewedDocuments) = v;
    return v'author;
}

_ $ExclusiveRightsClaim$_get_authorDetails((slice, (slice, slice), int, int, int) v) inline {
    var (v'author, v'authorDetails, v'amount, v'sentDocuments, v'viewedDocuments) = v;
    return v'authorDetails;
}

_ $ExclusiveRightsClaim$_get_amount((slice, (slice, slice), int, int, int) v) inline {
    var (v'author, v'authorDetails, v'amount, v'sentDocuments, v'viewedDocuments) = v;
    return v'amount;
}

_ $ExclusiveRightsClaim$_get_sentDocuments((slice, (slice, slice), int, int, int) v) inline {
    var (v'author, v'authorDetails, v'amount, v'sentDocuments, v'viewedDocuments) = v;
    return v'sentDocuments;
}

_ $ExclusiveRightsClaim$_get_viewedDocuments((slice, (slice, slice), int, int, int) v) inline {
    var (v'author, v'authorDetails, v'amount, v'sentDocuments, v'viewedDocuments) = v;
    return v'viewedDocuments;
}

tuple $ExclusiveRightsClaim$_to_tuple(((slice, (slice, slice), int, int, int)) v) inline {
    var (v'author, v'authorDetails, v'amount, v'sentDocuments, v'viewedDocuments) = v;
    return __tact_tuple_create_5(v'author, $PersonDetails$_to_tuple(v'authorDetails), v'amount, v'sentDocuments, v'viewedDocuments);
}

tuple $ExclusiveRightsClaim$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $ExclusiveRightsClaim$_to_tuple($ExclusiveRightsClaim$_not_null(v)); 
}

tuple $ExclusiveRightsClaim$_to_opt_external(tuple v) inline {
    var loaded = $ExclusiveRightsClaim$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((slice, (slice, slice), int, int, int)) $ExclusiveRightsClaim$_constructor_author_authorDetails_amount_sentDocuments_viewedDocuments(slice $author, (slice, slice) $authorDetails, int $amount, int $sentDocuments, int $viewedDocuments) inline {
    return ($author, $authorDetails, $amount, $sentDocuments, $viewedDocuments);
}

;;
;; Type: SetPrice
;; Header: 0x41231c75
;; TLB: set_price#41231c75 price:Maybe coins = SetPrice
;;

(slice, ((int))) $SetPrice$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1092820085);
    var v'price = sc_0~load_int(1) ? sc_0~load_coins() : null();
    return (sc_0, (v'price));
}

;;
;; Type: ClaimRequest
;; Header: 0xd54aa6e9
;; TLB: claim_request#d54aa6e9 authorDetails:PersonDetails{name:^string,address:^string} = ClaimRequest
;;

(slice, (((slice, slice)))) $ClaimRequest$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3578439401);
    var v'authorDetails = sc_0~$PersonDetails$_load();
    return (sc_0, (v'authorDetails));
}

;;
;; Type: ClaimApproval
;; Header: 0x2e30fb06
;; TLB: claim_approval#2e30fb06 assignmentHash:^string = ClaimApproval
;;

(slice, ((slice))) $ClaimApproval$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 774961926);
    var v'assignmentHash = sc_0~load_ref().begin_parse();
    return (sc_0, (v'assignmentHash));
}

;;
;; Type: DocumentData
;; TLB: _ author:PersonDetails{name:^string,address:^string} title:^string rootHash:^string data:^string tags:Maybe ^string description:Maybe ^string = DocumentData
;;

builder $DocumentData$_store(builder build_0, ((slice, slice), slice, slice, slice, slice, slice) v) inline_ref {
    var ((v'author'name, v'author'address), v'title, v'rootHash, v'data, v'tags, v'description) = v;
    build_0 = $PersonDetails$_store(build_0, (v'author'name, v'author'address));
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'title).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'rootHash).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'data).end_cell());
    var build_2 = begin_cell();
    build_2 = ~ null?(v'tags) ? build_2.store_int(true, 1).store_ref(begin_cell().store_slice(v'tags).end_cell()) : build_2.store_int(false, 1);
    build_2 = ~ null?(v'description) ? build_2.store_int(true, 1).store_ref(begin_cell().store_slice(v'description).end_cell()) : build_2.store_int(false, 1);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, (((slice, slice), slice, slice, slice, slice, slice))) $DocumentData$_load(slice sc_0) inline_ref {
    var v'author = sc_0~$PersonDetails$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'title = sc_1~load_ref().begin_parse();
    var v'rootHash = sc_1~load_ref().begin_parse();
    var v'data = sc_1~load_ref().begin_parse();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'tags = sc_2~load_int(1) ? sc_2~load_ref().begin_parse() : null();
    var v'description = sc_2~load_int(1) ? sc_2~load_ref().begin_parse() : null();
    return (sc_0, (v'author, v'title, v'rootHash, v'data, v'tags, v'description));
}

tuple $DocumentData$_to_tuple((((slice, slice), slice, slice, slice, slice, slice)) v) inline {
    var (v'author, v'title, v'rootHash, v'data, v'tags, v'description) = v;
    return __tact_tuple_create_6($PersonDetails$_to_tuple(v'author), v'title, v'rootHash, v'data, v'tags, v'description);
}

tuple $DocumentData$_to_external((((slice, slice), slice, slice, slice, slice, slice)) v) inline {
    var (v'author, v'title, v'rootHash, v'data, v'tags, v'description) = v; 
    return $DocumentData$_to_tuple(v'author, v'title, v'rootHash, v'data, v'tags, v'description);
}

;;
;; Type: GetFunds
;; Header: 0x0a30a01f
;; TLB: get_funds#0a30a01f amount:coins = GetFunds
;;

(slice, ((int))) $GetFunds$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 170958879);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: Commissions
;; TLB: _ transfershipCommissionPercentage:uint256 royaltyCommissionPercentage:uint256 = Commissions
;;

builder $Commissions$_store(builder build_0, (int, int) v) inline {
    var (v'transfershipCommissionPercentage, v'royaltyCommissionPercentage) = v;
    build_0 = build_0.store_uint(v'transfershipCommissionPercentage, 256);
    build_0 = build_0.store_uint(v'royaltyCommissionPercentage, 256);
    return build_0;
}

(slice, ((int, int))) $Commissions$_load(slice sc_0) inline {
    var v'transfershipCommissionPercentage = sc_0~load_uint(256);
    var v'royaltyCommissionPercentage = sc_0~load_uint(256);
    return (sc_0, (v'transfershipCommissionPercentage, v'royaltyCommissionPercentage));
}

tuple $Commissions$_to_tuple(((int, int)) v) inline {
    var (v'transfershipCommissionPercentage, v'royaltyCommissionPercentage) = v;
    return __tact_tuple_create_2(v'transfershipCommissionPercentage, v'royaltyCommissionPercentage);
}

tuple $Commissions$_to_external(((int, int)) v) inline {
    var (v'transfershipCommissionPercentage, v'royaltyCommissionPercentage) = v; 
    return $Commissions$_to_tuple(v'transfershipCommissionPercentage, v'royaltyCommissionPercentage);
}

;;
;; Type: SetCommissions
;; Header: 0x4b486165
;; TLB: set_commissions#4b486165 commissions:Commissions{transfershipCommissionPercentage:uint256,royaltyCommissionPercentage:uint256} documentAddress:Maybe address = SetCommissions
;;

(slice, (((int, int), slice))) $SetCommissions$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1263034725);
    var v'commissions = sc_0~$Commissions$_load();
    var v'documentAddress = sc_0~__tact_load_address_opt();
    return (sc_0, (v'commissions, v'documentAddress));
}

;;
;; Type: Document
;;

builder $Document$_store(builder build_0, (slice, int, (int, int), slice, slice, (slice, slice), ((slice, slice), slice, slice, slice, slice, slice), int, tuple, slice, slice) v) inline {
    var (v'parent, v'seqno, (v'commissions'transfershipCommissionPercentage, v'commissions'royaltyCommissionPercentage), v'author, v'exclusiveRightsOwner, (v'exclusiveRightsOwnerDetails'name, v'exclusiveRightsOwnerDetails'address), ((v'document'author'name, v'document'author'address), v'document'title, v'document'rootHash, v'document'data, v'document'tags, v'document'description), v'price, v'currentClaim, v'assignmentHash, v'royaltyWalletAddress) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    build_0 = build_0.store_uint(v'seqno, 256);
    var build_1 = begin_cell();
    build_1 = $Commissions$_store(build_1, (v'commissions'transfershipCommissionPercentage, v'commissions'royaltyCommissionPercentage));
    build_1 = __tact_store_address(build_1, v'author);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'exclusiveRightsOwner);
    build_2 = $PersonDetails$_store(build_2, (v'exclusiveRightsOwnerDetails'name, v'exclusiveRightsOwnerDetails'address));
    var build_3 = begin_cell();
    build_3 = $DocumentData$_store(build_3, ((v'document'author'name, v'document'author'address), v'document'title, v'document'rootHash, v'document'data, v'document'tags, v'document'description));
    build_3 = ~ null?(v'price) ? build_3.store_int(true, 1).store_coins(v'price) : build_3.store_int(false, 1);
    var build_4 = begin_cell();
    build_4 = ~ null?(v'currentClaim) ? build_4.store_int(true, 1).$ExclusiveRightsClaim$_store($ExclusiveRightsClaim$_not_null(v'currentClaim)) : build_4.store_int(false, 1);
    build_4 = ~ null?(v'assignmentHash) ? build_4.store_int(true, 1).store_ref(begin_cell().store_slice(v'assignmentHash).end_cell()) : build_4.store_int(false, 1);
    build_4 = __tact_store_address_opt(build_4, v'royaltyWalletAddress);
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, (int, int), slice, slice, (slice, slice), ((slice, slice), slice, slice, slice, slice, slice), int, tuple, slice, slice))) $Document$_load(slice sc_0) inline {
    var v'parent = sc_0~__tact_load_address();
    var v'seqno = sc_0~load_uint(256);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'commissions = sc_1~$Commissions$_load();
    var v'author = sc_1~__tact_load_address();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'exclusiveRightsOwner = sc_2~__tact_load_address();
    var v'exclusiveRightsOwnerDetails = sc_2~$PersonDetails$_load();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'document = sc_3~$DocumentData$_load();
    var v'price = sc_3~load_int(1) ? sc_3~load_coins() : null();
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'currentClaim = sc_4~load_int(1) ? $ExclusiveRightsClaim$_as_optional(sc_4~$ExclusiveRightsClaim$_load()) : null();
    var v'assignmentHash = sc_4~load_int(1) ? sc_4~load_ref().begin_parse() : null();
    var v'royaltyWalletAddress = sc_4~__tact_load_address_opt();
    return (sc_0, (v'parent, v'seqno, v'commissions, v'author, v'exclusiveRightsOwner, v'exclusiveRightsOwnerDetails, v'document, v'price, v'currentClaim, v'assignmentHash, v'royaltyWalletAddress));
}

(slice, ((slice, int, slice, ((slice, slice), slice, slice, slice, slice, slice), (int, int), slice))) $Document$init$_load(slice sc_0) inline_ref {
    var v'parent = sc_0~__tact_load_address();
    var v'seqno = sc_0~load_int(257);
    var v'author = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'document = sc_1~$DocumentData$_load();
    var v'commissions = sc_1~$Commissions$_load();
    var v'royaltyWalletAddress = sc_1~__tact_load_address_opt();
    return (sc_0, (v'parent, v'seqno, v'author, v'document, v'commissions, v'royaltyWalletAddress));
}

(slice, int, (int, int), slice, slice, (slice, slice), ((slice, slice), slice, slice, slice, slice, slice), int, tuple, slice, slice) $Document$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Document$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $parent, int $seqno, slice $author, ((slice, slice), slice, slice, slice, slice, slice) $document, (int, int) $commissions, slice $royaltyWalletAddress) = $sc~$Document$init$_load();
        $sc.end_parse();
        return $Document$_contract_init($parent, $seqno, $author, $document, $commissions, $royaltyWalletAddress);
    }
}

() $Document$_contract_store((slice, int, (int, int), slice, slice, (slice, slice), ((slice, slice), slice, slice, slice, slice, slice), int, tuple, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Document$_store(b, v);
    set_data(b.end_cell());
}
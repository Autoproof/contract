;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_code_data(slice to, cell body, int value, cell code, cell data) inline {
    return (true, to, value, 0, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: DocumentData
;; TLB: _ authorship:^string description:^string rootHash:^string data:^string tags:^string = DocumentData
;;

builder $DocumentData$_store(builder build_0, (slice, slice, slice, slice, slice) v) inline {
    var (v'authorship, v'description, v'rootHash, v'data, v'tags) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'authorship).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'description).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'rootHash).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'data).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'tags).end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, slice, slice))) $DocumentData$_load(slice sc_0) inline {
    var v'authorship = sc_0~load_ref().begin_parse();
    var v'description = sc_0~load_ref().begin_parse();
    var v'rootHash = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'data = sc_1~load_ref().begin_parse();
    var v'tags = sc_1~load_ref().begin_parse();
    return (sc_0, (v'authorship, v'description, v'rootHash, v'data, v'tags));
}

((slice, slice, slice, slice, slice)) $DocumentData$_tensor_cast((slice, slice, slice, slice, slice) v) asm "NOP";

;;
;; Type: DeclareDocument
;; Header: 0x4c2fea6d
;; TLB: declare_document#4c2fea6d document:DocumentData{authorship:^string,description:^string,rootHash:^string,data:^string,tags:^string} = DeclareDocument
;;

(slice, (((slice, slice, slice, slice, slice)))) $DeclareDocument$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1278208621);
    var v'document = sc_0~$DocumentData$_load();
    return (sc_0, (v'document));
}

;;
;; Type: DocumentDeclaration
;; Header: 0x8ea29cef
;; TLB: document_declaration#8ea29cef address:address = DocumentDeclaration
;;

builder $DocumentDeclaration$_store(builder build_0, (slice) v) inline {
    var (v'address) = v;
    build_0 = store_uint(build_0, 2393021679, 32);
    build_0 = __tact_store_address(build_0, v'address);
    return build_0;
}

cell $DocumentDeclaration$_store_cell((slice) v) inline {
    return $DocumentDeclaration$_store(begin_cell(), v).end_cell();
}

((slice)) $DocumentDeclaration$_constructor_address(slice address) inline {
    return (address);
}

;;
;; Type: GetFunds
;; Header: 0x0a30a01f
;; TLB: get_funds#0a30a01f amount:coins = GetFunds
;;

(slice, ((int))) $GetFunds$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 170958879);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: Autoproof
;;

builder $Autoproof$_store(builder build_0, (slice, int) v) inline {
    var (v'owner, v'documentsNumber) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'documentsNumber, 256);
    return build_0;
}

(slice, ((slice, int))) $Autoproof$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'documentsNumber = sc_0~load_uint(256);
    return (sc_0, (v'owner, v'documentsNumber));
}

(slice, int) $Autoproof$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Autoproof$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Autoproof$_contract_init();
    }
}

() $Autoproof$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Autoproof$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: Document
;;

builder $Document$init$_store(builder build_0, (slice, int, slice, (slice, slice, slice, slice, slice)) v) inline {
    var (v'parent, v'seqno, v'author, (v'documentData'authorship, v'documentData'description, v'documentData'rootHash, v'documentData'data, v'documentData'tags)) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    build_0 = build_0.store_int(v'seqno, 257);
    build_0 = __tact_store_address(build_0, v'author);
    var build_1 = begin_cell();
    build_1 = $DocumentData$_store(build_1, (v'documentData'authorship, v'documentData'description, v'documentData'rootHash, v'documentData'data, v'documentData'tags));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(cell, cell) $Document$_init_child(cell sys', slice $parent, int $seqno, slice $author, (slice, slice, slice, slice, slice) $documentData) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Document
    cell mine = __tact_dict_get_code(source, 27038);
    contracts = __tact_dict_set_code(contracts, 27038, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Document$init$_store(b, ($parent, $seqno, $author, $documentData));
    return (mine, b.end_cell());
}